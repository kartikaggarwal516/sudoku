{"version":3,"sources":["logo.svg","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","state","puzzle","result","changeHandler","event","i","j","num","target","value","console","log","newpuzzle","setState","alert","this","SudokuSolver","className","map","row","col","key","type","onChange","Component","JSON","parse","stringify","emptySpaces","nonPossibilities","gridrow","Math","floor","gridcol","filledNumbers","Object","keys","length","includes","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e35ac99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\"\r\nimport \"./Assets/Styles/home.css\"\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        puzzle: [\r\n            [5, 3, 0, 0, 7, 0, 0, 0, 0],\r\n            [6, 0, 0, 1, 9, 5, 0, 0, 0],\r\n            [0, 9, 8, 0, 0, 0, 0, 6, 0],\r\n            [8, 0, 0, 0, 6, 0, 0, 0, 3],\r\n            [4, 0, 0, 8, 3, 0, 0, 1, 0],\r\n            [7, 0, 0, 0, 2, 0, 0, 0, 6],\r\n            [0, 6, 0, 0, 0, 0, 2, 8, 0],\r\n            [0, 0, 0, 4, 1, 9, 0, 0, 5],\r\n            [0, 0, 0, 0, 8, 0, 0, 7, 9]\r\n        ],\r\n        result: []\r\n    }\r\n    \r\n    changeHandler = (event,i,j) => {\r\n        \r\n        const num = event.target.value\r\n        console.log(\"num\", num)\r\n        console.log(\"i\",i,\"j\",j,\"result\",this.state.result[i][j])\r\n\r\n        if(num==\"\")\r\n            {\r\n                const newpuzzle = this.state.puzzle\r\n                newpuzzle[i][j] = num\r\n                this.setState({puzzle: [...newpuzzle] })\r\n            }\r\n\r\n            else if(num != this.state.result[i][j])\r\n            alert(\"Wrong Input\")\r\n\r\n            else\r\n            {\r\n                const newpuzzle = this.state.puzzle\r\n                newpuzzle[i][j] = num\r\n                this.setState({puzzle: [...newpuzzle] })\r\n            }         \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState( {result : SudokuSolver(this.state.puzzle)} )        \r\n    }\r\n\r\n    render() {\r\n        const { puzzle } = this.state\r\n        return (\r\n            <div className=\"outerBox\">\r\n                {puzzle.map( (row,i) => {\r\n                    return (\r\n                        <div className=\"row\">\r\n                        {row.map( (col,j) => {\r\n                            return (\r\n                                <div key={j} className=\"gridBox\">\r\n                                    {puzzle[i][j] !==0 && puzzle[i][j] !==\"\" ? puzzle[i][j]\r\n                                     :<input type=\"number\" onChange={(event) => this.changeHandler(event,i,j)} />\r\n                                    }                                   \r\n                                </div>\r\n                            )\r\n                        })}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n\r\nconst SudokuSolver = puzzle => {\r\n\r\n    puzzle = JSON.parse( JSON.stringify(puzzle) )\r\n\r\n    let emptySpaces = 10\r\n\r\n    while (emptySpaces > 0) {\r\n        emptySpaces = 0\r\n\r\n        for (let row = 0; row < 9; row++) {\r\n            for (let col = 0; col < 9; col++) {\r\n                if (puzzle[row][col] == 0) {\r\n                    let nonPossibilities = {}\r\n                    for (let i = 0; i < 9; i++) {\r\n                        if (puzzle[row][i] > 0)\r\n                            nonPossibilities[puzzle[row][i]] = true\r\n                        if (puzzle[i][col] > 0)\r\n                            nonPossibilities[puzzle[i][col]] = true\r\n                    }\r\n                    for (let gridrow = Math.floor(row / 3) * 3; gridrow < Math.floor(row / 3) * 3 + 3; gridrow++) {\r\n                        for (let gridcol = Math.floor(col / 3) * 3; gridcol < Math.floor(col / 3) * 3 + 3; gridcol++) {\r\n                            if (puzzle[gridrow][gridcol])\r\n                                nonPossibilities[puzzle[gridrow][gridcol]] = true\r\n                        }\r\n                    }\r\n\r\n                    let filledNumbers = Object.keys(nonPossibilities)\r\n\r\n                    if (filledNumbers.length === 8) {\r\n                        for (let i = 1; i < 10; i++) {\r\n                            if ( !(filledNumbers.includes( i.toString() )) )\r\n                                puzzle[row][col] = i                    \r\n                        }\r\n                    }\r\n                    else\r\n                        emptySpaces++\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return puzzle\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}